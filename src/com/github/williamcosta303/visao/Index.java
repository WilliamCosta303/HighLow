package com.github.williamcosta303.visao;

import javax.swing.JOptionPane;
import com.github.williamcosta303.utilitarios.Arquivo;
import com.github.williamcosta303.utilitarios.Estranho;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.filechooser.*;
//import javax.swing.filechooser.FileNameExtensionFilter;

/*
    Copyright (c) 2016-2017, William A. Costa
    All rights reserved.
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
        * Neither the name of the William A. Costa nor the
          names of its contributors may be used to endorse or promote products
          derived from this software without specific prior written permission.
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL WILLIAM A. COSTA BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

public class Index extends javax.swing.JFrame {

    // Variáveis
    Estranho E = new Estranho();
    int cartaAtual[] = {0,0}, cartaAnterior[] = {0,0}, dinheiro = 120, valorAposta = 20, dinheiroInimigo = gerarDinheiroEstranho(), multiplicador = 2;
    String nomeSalvo = "";
    
    // Conquistas
    boolean manteveApostaOriginal = true;
    boolean perdeuUmaAposta = false;
    int vitoriasSeguidas = 0;
    int vitoriasSeguidasMaior = 0;
    int cliquesNoRosto = 0;
    
    // Estatísticas
    int vitorias = 0, derrotas = 0, apostasGanhas = 0, apostasPerdidas = 0, apostasEmpatadas = 0, apostasMaior = 0, apostasMenor = 0, dinheiroGanho = 0, dinheiroPerdido = 0;
    
    public Index() {
        initComponents();
        this.sorteiaUmaCarta(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        painelCartas = new javax.swing.JPanel();
        lCartaAtual = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lCartaAnterior = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pJogo = new javax.swing.JPanel();
        painelDinheiro = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lDinheiroAtual = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        painelEstranho = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mEstranho = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        lDinheiroInimigo = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lMultiplicador = new javax.swing.JLabel();
        bApostarMais = new javax.swing.JButton();
        bApostarMenos = new javax.swing.JButton();
        pConquistas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tConquistas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        pEstatisticas = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lEstVitorias = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lEstDerrotas = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lEstApostasMaior = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lEstApostasMenor = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lEstApostasGanhas = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lEstApostasPerdidas = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        lEstDinheiroGanho = new javax.swing.JLabel();
        lEstDinheiroPerdido = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        lEstApostasEmpatadas = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mJogoNovo = new javax.swing.JMenuItem();
        mJogoAbrir = new javax.swing.JMenuItem();
        mJogoSalvar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mAjudaSobre = new javax.swing.JMenuItem();

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\Users\\william.cds\\Documents\\NetBeansProjects\\HighLow\\saves"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maior-Menor");
        setIconImage(Toolkit.getDefaultToolkit().getImage(Index.class.getResource("/com/github/williamcosta303/imagens/icone.png")));
        setResizable(false);

        lCartaAtual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/copa-1.png"))); // NOI18N
        lCartaAtual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lCartaAtualMouseClicked(evt);
            }
        });

        jLabel2.setText("Carta atual:");

        lCartaAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/none.png"))); // NOI18N
        lCartaAnterior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lCartaAnteriorMouseClicked(evt);
            }
        });

        jLabel4.setText("Carta anterior:");

        javax.swing.GroupLayout painelCartasLayout = new javax.swing.GroupLayout(painelCartas);
        painelCartas.setLayout(painelCartasLayout);
        painelCartasLayout.setHorizontalGroup(
            painelCartasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelCartasLayout.createSequentialGroup()
                .addGroup(painelCartasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelCartasLayout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(lCartaAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(painelCartasLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCartasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lCartaAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(301, 301, 301))
        );
        painelCartasLayout.setVerticalGroup(
            painelCartasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelCartasLayout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lCartaAnterior)
                .addGap(34, 34, 34))
            .addGroup(painelCartasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lCartaAtual)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dinheiro atual");

        lDinheiroAtual.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lDinheiroAtual.setText(Integer.toString(this.dinheiro));
        lDinheiroAtual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lDinheiroAtualMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("$");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Aposta atual");

        jSlider1.setMajorTickSpacing(5);
        jSlider1.setMaximum(35);
        jSlider1.setMinimum(5);
        jSlider1.setMinorTickSpacing(5);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(this.valorAposta);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout painelDinheiroLayout = new javax.swing.GroupLayout(painelDinheiro);
        painelDinheiro.setLayout(painelDinheiroLayout);
        painelDinheiroLayout.setHorizontalGroup(
            painelDinheiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDinheiroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDinheiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDinheiroLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lDinheiroAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelDinheiroLayout.setVerticalGroup(
            painelDinheiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDinheiroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDinheiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDinheiroAtual)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/shadyguy.png"))); // NOI18N
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        mEstranho.setEditable(false);
        mEstranho.setColumns(20);
        mEstranho.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        mEstranho.setLineWrap(true);
        mEstranho.setRows(3);
        mEstranho.setText(E.geraFalaInicio());
        mEstranho.setWrapStyleWord(true);
        jScrollPane1.setViewportView(mEstranho);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Multiplicador: x");

        lDinheiroInimigo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lDinheiroInimigo.setText(Integer.toString(this.dinheiroInimigo));
        lDinheiroInimigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lDinheiroInimigoMouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Dinheiro: $");

        lMultiplicador.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lMultiplicador.setText(Integer.toString(this.multiplicador)
        );
        lMultiplicador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lMultiplicadorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelEstranhoLayout = new javax.swing.GroupLayout(painelEstranho);
        painelEstranho.setLayout(painelEstranhoLayout);
        painelEstranhoLayout.setHorizontalGroup(
            painelEstranhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelEstranhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEstranhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(painelEstranhoLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lMultiplicador, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(painelEstranhoLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lDinheiroInimigo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        painelEstranhoLayout.setVerticalGroup(
            painelEstranhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEstranhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEstranhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelEstranhoLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(painelEstranhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lDinheiroInimigo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelEstranhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lMultiplicador))
                        .addGap(13, 13, 13))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        bApostarMais.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/aposta-mais.png"))); // NOI18N
        bApostarMais.setText("Apostar mais");
        bApostarMais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bApostarMaisActionPerformed(evt);
            }
        });

        bApostarMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/aposta-menos.png"))); // NOI18N
        bApostarMenos.setText("Apostar menos");
        bApostarMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bApostarMenosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pJogoLayout = new javax.swing.GroupLayout(pJogo);
        pJogo.setLayout(pJogoLayout);
        pJogoLayout.setHorizontalGroup(
            pJogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pJogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelDinheiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pJogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bApostarMais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bApostarMenos, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painelEstranho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pJogoLayout.setVerticalGroup(
            pJogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pJogoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pJogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelEstranho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelDinheiro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pJogoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(bApostarMais)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bApostarMenos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Jogo", new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/ic-jogo-16.png")), pJogo); // NOI18N

        tConquistas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Alguns nascem com sorte", "Ganhe cinco apostas seguidas", "-"},
                {"Confio no que tenho", "Ganhe uma partida sem alterar o valor da aposta", "-"},
                {"Casado com a sorte", "Ganhe uma partida sem perder uma aposta", "-"},
                {"Ator da televisão", "BLOQUEADO", "-"},
                {"Nem começou ainda", "BLOQUEADO", "-"},
                {"Quais as chances?", "Ganhe três apostas apenas apostando em maior", "-"},
                {"Realeza", "Una o rei e a rainha numa aposta", "-"}
            },
            new String [] {
                "Nome", "Descrição", "Obtido em"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tConquistas.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tConquistas);
        if (tConquistas.getColumnModel().getColumnCount() > 0) {
            tConquistas.getColumnModel().getColumn(0).setResizable(false);
            tConquistas.getColumnModel().getColumn(0).setPreferredWidth(40);
            tConquistas.getColumnModel().getColumn(1).setResizable(false);
            tConquistas.getColumnModel().getColumn(2).setResizable(false);
            tConquistas.getColumnModel().getColumn(2).setPreferredWidth(40);
        }

        jButton1.setText("Ver conquista");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pConquistasLayout = new javax.swing.GroupLayout(pConquistas);
        pConquistas.setLayout(pConquistasLayout);
        pConquistasLayout.setHorizontalGroup(
            pConquistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pConquistasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pConquistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addGroup(pConquistasLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pConquistasLayout.setVerticalGroup(
            pConquistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pConquistasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Conquitas", new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/ic-conquistas-16.png")), pConquistas); // NOI18N

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Vitórias: ");

        lEstVitorias.setText("0");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Derrotas: ");

        lEstDerrotas.setText("0");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Apostas em maior: ");

        lEstApostasMaior.setText("0");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Apostas em menor: ");

        lEstApostasMenor.setText("0");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Apostas ganhas: ");

        lEstApostasGanhas.setText("0");

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Apostas perdidas: ");

        lEstApostasPerdidas.setText("0");

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Dinheiro ganho: $");

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Dinheiro perdido: $");

        lEstDinheiroGanho.setText("0");

        lEstDinheiroPerdido.setText("0");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Apostas empatadas: ");

        lEstApostasEmpatadas.setText("0");

        javax.swing.GroupLayout pEstatisticasLayout = new javax.swing.GroupLayout(pEstatisticas);
        pEstatisticas.setLayout(pEstatisticasLayout);
        pEstatisticasLayout.setHorizontalGroup(
            pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEstatisticasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lEstApostasMaior, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lEstApostasMenor, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lEstApostasGanhas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lEstApostasPerdidas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pEstatisticasLayout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lEstVitorias, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pEstatisticasLayout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lEstDerrotas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pEstatisticasLayout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lEstDinheiroGanho, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pEstatisticasLayout.createSequentialGroup()
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lEstDinheiroPerdido, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lEstApostasEmpatadas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        pEstatisticasLayout.setVerticalGroup(
            pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pEstatisticasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lEstVitorias))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(lEstDerrotas)))
                    .addGroup(pEstatisticasLayout.createSequentialGroup()
                        .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(lEstDinheiroGanho))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(lEstDinheiroPerdido))))
                .addGap(18, 18, 18)
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(lEstApostasGanhas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(lEstApostasPerdidas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(lEstApostasEmpatadas))
                .addGap(18, 18, 18)
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lEstApostasMaior))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pEstatisticasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(lEstApostasMenor))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Estatísticas", new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/ic-estatisticas-16.png")), pEstatisticas); // NOI18N

        jMenu1.setText("Jogo");

        mJogoNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mJogoNovo.setText("Novo jogo");
        mJogoNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJogoNovoActionPerformed(evt);
            }
        });
        jMenu1.add(mJogoNovo);

        mJogoAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mJogoAbrir.setText("Abrir");
        mJogoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJogoAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(mJogoAbrir);

        mJogoSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mJogoSalvar.setText("Salvar");
        mJogoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mJogoSalvarActionPerformed(evt);
            }
        });
        jMenu1.add(mJogoSalvar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ajuda");

        mAjudaSobre.setText("Sobre");
        mAjudaSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAjudaSobreActionPerformed(evt);
            }
        });
        jMenu2.add(mAjudaSobre);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelCartas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelCartas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        this.valorAposta = jSlider1.getValue();
        this.manteveApostaOriginal = false;
    }//GEN-LAST:event_jSlider1StateChanged

    private void bApostarMaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApostarMaisActionPerformed
        // Estatísticas
        this.apostasMaior++;
        
        this.sorteiaUmaCarta(false);
        if(cartaAtual[0] > cartaAnterior[0]){
            // GANHOU
            this.dinheiro += this.valorAposta;
            this.dinheiroInimigo -= this.valorAposta;
            
            // Conquistas
            this.vitoriasSeguidas++;
            this.vitoriasSeguidasMaior++;
            
            // Estatísticas
            this.apostasGanhas++;
            this.dinheiroGanho+= this.valorAposta;
            
            // Estranho
            this.mEstranho.setText(E.geraFalaVitoria(this.multiplicador));
            this.verificaAlteracaoMultiplicador();
            
            // Mensagem
            JOptionPane.showMessageDialog(this, "Acertou, você ganhou $" + this.valorAposta + "!", "VITÓRIA", JOptionPane.INFORMATION_MESSAGE);
        } else if(cartaAtual[0] < cartaAnterior[0]){
            // PERDEU
            this.dinheiro -= this.valorAposta * multiplicador;
            this.dinheiroInimigo += this.valorAposta * multiplicador;
            
            // Conquistas
            this.vitoriasSeguidas = 0;
            this.vitoriasSeguidasMaior = 0;
            this.perdeuUmaAposta = true;
            
            // Estatísticas
            this.apostasPerdidas++;
            this.dinheiroPerdido+= this.valorAposta * multiplicador;
            
            // Estranho
            this.mEstranho.setText(E.geraFalaDerrota(this.multiplicador));
            this.verificaAlteracaoMultiplicador();
            
            // Mensagem
            JOptionPane.showMessageDialog(this, "Errou, você perdeu $" + (this.valorAposta * multiplicador) + "!", "DERROTA", JOptionPane.ERROR_MESSAGE);
        } else {
            // EMPATE
            this.vitoriasSeguidas = 0;
            
            // Estatísticas
            this.apostasEmpatadas++;
            
            // Estranho
            this.mEstranho.setText(E.geraFalaEmpate(this.multiplicador));
            this.verificaAlteracaoMultiplicador();
            
            // Mensagem
            JOptionPane.showMessageDialog(this, "Empate, não há modificação no seu dinheiro!", "VITÓRIA", JOptionPane.INFORMATION_MESSAGE);
        }
        
        // Conquistas
        this.verificaVitoriasSeguidas();
        this.verificaRealeza();
        
        this.atualizarDinheiros();
        this.verificaVitoria();
        
        // Estatísticas
        this.atualizaCamposEstatisticas();
    }//GEN-LAST:event_bApostarMaisActionPerformed

    private void bApostarMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApostarMenosActionPerformed
        // Estatísticas
        this.apostasMenor++;
        
        this.sorteiaUmaCarta(false);
        if(cartaAtual[0] < cartaAnterior[0]){
            // GANHOU
            this.dinheiro += this.valorAposta;
            this.dinheiroInimigo -= this.valorAposta;
            
            // Conquistas
            this.vitoriasSeguidas++;
            this.vitoriasSeguidasMaior = 0;
            
            // Estatísticas
            this.apostasGanhas++;
            this.dinheiroGanho+= this.valorAposta;
            
            // Estranho
            this.mEstranho.setText(E.geraFalaVitoria(this.multiplicador));
            this.verificaAlteracaoMultiplicador();
            
            // Mensagem
            JOptionPane.showMessageDialog(this, "Acertou, você ganhou $" + this.valorAposta + "!", "VITÓRIA", JOptionPane.INFORMATION_MESSAGE);
        } else if(cartaAtual[0] > cartaAnterior[0]){
            // PERDEU
            this.dinheiro -= this.valorAposta * multiplicador;
            this.dinheiroInimigo += this.valorAposta * multiplicador;
            
            // Conquistas
            this.vitoriasSeguidas = 0;
            this.vitoriasSeguidasMaior = 0;
            this.perdeuUmaAposta = true;
            
            // Estatísticas
            this.apostasPerdidas++;
            this.dinheiroPerdido+= this.valorAposta * multiplicador;
            
            // Estranho
            this.mEstranho.setText(E.geraFalaDerrota(this.multiplicador));
            this.verificaAlteracaoMultiplicador();
            
            // Mensagem
            JOptionPane.showMessageDialog(this, "Errou, você perdeu $" + (this.valorAposta * multiplicador) + "!", "DERROTA", JOptionPane.ERROR_MESSAGE);
        } else {
            // EMPATE
            this.vitoriasSeguidas = 0;
            
            // Estatísticas
            this.apostasEmpatadas++;
            
            // Estranho
            this.mEstranho.setText(E.geraFalaEmpate(this.multiplicador));
            this.verificaAlteracaoMultiplicador();
            
            // Mensagem
            JOptionPane.showMessageDialog(this, "Empate, não há modificação no seu dinheiro!", "VITÓRIA", JOptionPane.INFORMATION_MESSAGE);
        }
        
        // Conquistas
        this.verificaVitoriasSeguidas();
        this.verificaRealeza();
        
        this.atualizarDinheiros();
        this.verificaVitoria();
        
        // Estatísticas
        this.atualizaCamposEstatisticas();
    }//GEN-LAST:event_bApostarMenosActionPerformed

    private void lMultiplicadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lMultiplicadorMouseClicked
        this.mEstranho.setText(E.geraFalaGenerica("O multiplicador que você irá perder quando errar, pode deixar que eu cuido dele, hehe."));
    }//GEN-LAST:event_lMultiplicadorMouseClicked

    private void lDinheiroInimigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lDinheiroInimigoMouseClicked
        if(dinheiroInimigo > dinheiro){
            this.mEstranho.setText(E.geraFalaGenerica("Meu dinheiro, não se preocupe, deve estar sempre maior que o seu!"));
        } else {
            this.mEstranho.setText(E.geraFalaGenerica("Meu dinheiro, não fique se achando, já me recupero."));
        }
    }//GEN-LAST:event_lDinheiroInimigoMouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        if(this.cliquesNoRosto == 6 && this.tConquistas.getValueAt(3, 2).equals("-")){
            this.mEstranho.setText(E.geraFalaGenerica("Eu sei, meu rosto é irresistível!"));
            JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\n\nATOR DA TELEVISÃO!\n- Clique no rosto do inimigo sete vezes!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
            this.tConquistas.setValueAt("Clique no rosto do inimigo sete vezes", 3, 1);
            this.tConquistas.setValueAt(this.recebeHorario(), 3, 2);
        } else {
            this.mEstranho.setText(E.geraFalaGenerica("Meu lindo rosto, eu deveria estar na televisão!"));
            this.cliquesNoRosto++;
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void mAjudaSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAjudaSobreActionPerformed
        JOptionPane.showMessageDialog(this, "Maior-menor\n2.3 (build 170324.1)\n\nCriado por: William A. Costa\nhttps://github.com/williamcosta303", "SOBRE", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mAjudaSobreActionPerformed

    private void mJogoNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJogoNovoActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja iniciar um novo jogo?\nISSO APAGARÁ TUDO DO JOGO ATUAL!\n(INCLUINDO AS CONQUISTAS!!!)", "CONFIRMAÇÃO", JOptionPane.YES_NO_OPTION);
        if(confirma == JOptionPane.YES_OPTION){
            this.iniciarNovoJogo(false);
        }
    }//GEN-LAST:event_mJogoNovoActionPerformed

    private void mJogoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJogoSalvarActionPerformed
        /*
        Ordem:
        01 - cartaAtual[0]
        02 - cartaAtual[1]
        03 - cartaAnterior[0]
        04 - cartaAnterior[1]
        05 - dinheiro
        06 - valorAposta
        07 - dinheiroInimigo
        08 - multiplicador
        09 - nome (Estranho)
        10 - Horário conquista 1 (Alguns nascem com sorte)
        11 - Horário conquista 2 (Confio no que tenho)
        12 - Horário conquista 3 (Casado com a sorte)
        13 - Horário conquista 4 (Ator da televisão)
        14 - Horário conquista 5 (Nem começou ainda)
        15 - Horário conquista 6 (Quais as chances?)
        16 - Horário conquista 7 (Realeza)
        17 - manteveApostaOriginal
        18 - perdeuUmaAposta
        19 - vitorias
        20 - derrotas
        21 - apostasGanhas
        22 - apostasPerdidas
        23 - apostasEmpatadas
        24 - apostasMaior
        25 - apostasMenor
        26 - dinheiroGanho
        27 - dinheiroPerdido
        */
        try{
            // Janela para salvar arquivo
            File workingDirectory = new File(System.getProperty("user.dir") + "\\saves");
            jFileChooser1.setCurrentDirectory(workingDirectory);
            FileNameExtensionFilter filtroMMSV = new FileNameExtensionFilter("Saves Maior-menos (*.mmsv)", "mmsv");
            jFileChooser1.addChoosableFileFilter(filtroMMSV);
            jFileChooser1.setFileFilter(filtroMMSV);
            
            
            int result = this.jFileChooser1.showSaveDialog(this);
            
            if(result == javax.swing.JFileChooser.APPROVE_OPTION){
                String tmp = this.jFileChooser1.getSelectedFile().getAbsolutePath();
                if(!tmp.endsWith(".mmsv") && tmp.length() > 0){
                    tmp = tmp + ".mmsv";
                }

                if(tmp.length() > 0){
                    Arquivo A = new Arquivo();
                    String conteudo = cartaAtual[0] + "," + cartaAtual[1] + "," + cartaAnterior[0] + ","
                            + cartaAnterior[1] + "," + dinheiro + "," + valorAposta + "," + dinheiroInimigo + ","
                            + multiplicador + "," + E.getNome() + "," + tConquistas.getValueAt(0, 2) + ","
                            + tConquistas.getValueAt(1, 2) + "," + tConquistas.getValueAt(2, 2) + ","
                            + tConquistas.getValueAt(3, 2) + "," + tConquistas.getValueAt(4, 2) + ","
                            + tConquistas.getValueAt(5, 2) + "," + tConquistas.getValueAt(6, 2) + ","
                            + manteveApostaOriginal + "," + perdeuUmaAposta + "," + vitorias + "," + derrotas + "," 
                            + apostasGanhas + "," + apostasPerdidas + "," + apostasEmpatadas + "," + apostasMaior + ","
                            + apostasMenor + "," + dinheiroGanho + "," + dinheiroPerdido;
                    A.salvarArquivo(tmp, conteudo);
                    JOptionPane.showMessageDialog(this, "Jogo salvo com sucesso!", "SALVAR", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Cancelando save.", "SALVAR", JOptionPane.INFORMATION_MESSAGE);
            }

            
        } catch(NullPointerException NPE){
            // IGNORA SILENCIOSAMENTE O SAVE
        }
        
    }//GEN-LAST:event_mJogoSalvarActionPerformed

    private void mJogoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mJogoAbrirActionPerformed
        try{
            // Janela para abrir arquivo
            File workingDirectory = new File(System.getProperty("user.dir") + "\\saves");
            jFileChooser1.setCurrentDirectory(workingDirectory);
            int result = this.jFileChooser1.showOpenDialog(this);
           
            if(result == javax.swing.JFileChooser.APPROVE_OPTION){
                // Arquivo
                Arquivo A = new Arquivo();
                String conteudo[] = A.lerArquivo(jFileChooser1.getSelectedFile().getAbsolutePath()).split(",");
                
                // Reseta as variáveis
                cartaAtual[0] = Integer.parseInt(conteudo[0]);
                cartaAtual[1] = Integer.parseInt(conteudo[1]);
                cartaAnterior[0] = Integer.parseInt(conteudo[2]);
                cartaAnterior[1] = Integer.parseInt(conteudo[3]);
                dinheiro = Integer.parseInt(conteudo[4]);
                valorAposta = Integer.parseInt(conteudo[5]);
                dinheiroInimigo = Integer.parseInt(conteudo[6]);
                multiplicador = Integer.parseInt(conteudo[7]);
                E.setNome(conteudo[8]);
                
                // Atualiza as conquistas
                this.tConquistas.setValueAt(conteudo[9], 0, 2);
                this.tConquistas.setValueAt(conteudo[10], 1, 2);
                this.tConquistas.setValueAt(conteudo[11], 2, 2);
                this.tConquistas.setValueAt(conteudo[12], 3, 2);
                if(!conteudo[12].equals("-")){
                    this.tConquistas.setValueAt("Clique no rosto do inimigo sete vezes", 3, 1);
                }
                this.tConquistas.setValueAt(conteudo[13], 4, 2);
                if(!conteudo[13].equals("-")){
                    this.tConquistas.setValueAt("Clique na carta anterior antes do jogo começar", 4, 1);
                }
                this.tConquistas.setValueAt(conteudo[14], 5, 2);
                this.tConquistas.setValueAt(conteudo[15], 6, 2);
                this.manteveApostaOriginal = Boolean.parseBoolean(conteudo[16]);
                this.perdeuUmaAposta = Boolean.parseBoolean(conteudo[17]);
                
                // Seta as estatísticas
                this.vitorias = Integer.parseInt(conteudo[18]);
                this.derrotas = Integer.parseInt(conteudo[19]);
                this.apostasGanhas = Integer.parseInt(conteudo[20]);
                this.apostasPerdidas = Integer.parseInt(conteudo[21]);
                this.apostasEmpatadas = Integer.parseInt(conteudo[22]);
                this.apostasMaior = Integer.parseInt(conteudo[23]);
                this.apostasMenor = Integer.parseInt(conteudo[24]);
                this.dinheiroGanho = Integer.parseInt(conteudo[25]);
                this.dinheiroPerdido = Integer.parseInt(conteudo[26]);
                
                // Atualiza os componentes da janela
                this.jSlider1.setValue(valorAposta);
                this.lDinheiroAtual.setText(Integer.toString(dinheiro));
                this.lDinheiroInimigo.setText(Integer.toString(dinheiroInimigo));
                this.lMultiplicador.setText(Integer.toString(multiplicador));
                this.mEstranho.setText(E.geraFalaCarregou(this.multiplicador));
                this.atualizarCartas();
                this.atualizaCamposEstatisticas();

                JOptionPane.showMessageDialog(this, "Jogo carregado com sucesso!", "ABRIR", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Cancelando carregamento.", "ABRIR", JOptionPane.INFORMATION_MESSAGE);
            }
            
            
        } catch(IOException IOE){
            JOptionPane.showMessageDialog(this, "Erro ao abrir o save!\nCausa: " + IOE.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        } catch(NullPointerException | NumberFormatException NPE){
            JOptionPane.showMessageDialog(this, "Esse arquivo não é considerado um save válido!\nTente outro arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        } catch(ArrayIndexOutOfBoundsException AE){
            // Atualiza os componentes da janela
            this.jSlider1.setValue(valorAposta);
            this.lDinheiroAtual.setText(Integer.toString(dinheiro));
            this.lDinheiroInimigo.setText(Integer.toString(dinheiroInimigo));
            this.lMultiplicador.setText(Integer.toString(multiplicador));
            this.mEstranho.setText(E.geraFalaCarregou(this.multiplicador));
            this.atualizarCartas();
            this.atualizaCamposEstatisticas();
            
            JOptionPane.showMessageDialog(this, "Save antigo detectado!\nSeu jogo foi importado, da próxima vez que salvar ele será atualizado para a nova versão!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_mJogoAbrirActionPerformed

    private void lCartaAtualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lCartaAtualMouseClicked
        this.mEstranho.setText(E.geraFalaCartaAtual(cartaAtual[0], cartaAtual[1], this.multiplicador));
    }//GEN-LAST:event_lCartaAtualMouseClicked

    private void lCartaAnteriorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lCartaAnteriorMouseClicked
        if(cartaAnterior[0] != 0){
            this.mEstranho.setText(E.geraFalaCartaAnterior(cartaAnterior[0], cartaAnterior[1], this.multiplicador));
        } else {
            this.mEstranho.setText(E.geraFalaGenerica("Ainda não começamos a jogar."));
            if(this.tConquistas.getValueAt(4, 2).equals("-")){
                JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\nNEM COMEÇOU AINDA!\n- Clique na carta anterior antes do jogo começar!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
                this.tConquistas.setValueAt("Clique na carta anterior antes do jogo começar", 4, 1);
                this.tConquistas.setValueAt(this.recebeHorario(), 4, 2);
            }
        }
    }//GEN-LAST:event_lCartaAnteriorMouseClicked

    private void lDinheiroAtualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lDinheiroAtualMouseClicked
        this.mEstranho.setText(E.geraFalaDinheiro(this.multiplicador));
    }//GEN-LAST:event_lDinheiroAtualMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int tmp = this.tConquistas.getSelectedRow();
        if(tmp != -1){
            JOptionPane.showMessageDialog(this, this.tConquistas.getValueAt(tmp, 0) + "\n--\nDescrição:\n" + this.tConquistas.getValueAt(tmp, 1) + "\n\nConquistado em: " + this.tConquistas.getValueAt(tmp, 2), "CONQUISTA", JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para verificar a conquista!", "AVISO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }
    
    private void sorteiaUmaCarta(boolean inicioPartida){
        int cartaGerada = geraNumeroAleatorio(1, 13);
        int naipeGerado = geraNumeroAleatorio(1, 4);
        
        // Evita que a carta sorteada seja igual a anterior
        if(cartaGerada == cartaAtual[0] && naipeGerado == cartaAtual[1]){
            do{
                naipeGerado = geraNumeroAleatorio(1, 4);
            }while(naipeGerado == cartaAtual[1]);
        }
        
        // Salva a carta anterior em seu lugar
        this.cartaAnterior[0] = cartaAtual[0];
        this.cartaAnterior[1] = cartaAtual[1];
        
        // Salva a carta gerada como nova carta
        this.cartaAtual[0] = cartaGerada;
        this.cartaAtual[1] = naipeGerado;
        
        if(inicioPartida){
            lCartaAtual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/" + getNaipe(cartaAtual[1]) + "-" + cartaAtual[0] + ".png")));
        } else {
            this.atualizarCartas();
        }
    }
    
    private void atualizarCartas(){
        if(cartaAnterior[1] != 0){
            lCartaAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/" + getNaipe(cartaAnterior[1]) + "-" + cartaAnterior[0] + ".png")));
        } else {
            lCartaAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/none.png")));
        }
        lCartaAtual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/" + getNaipe(cartaAtual[1]) + "-" + cartaAtual[0] + ".png")));
    }
    
    private void atualizarDinheiros(){
        this.lDinheiroAtual.setText(Integer.toString(this.dinheiro));
        this.lDinheiroInimigo.setText(Integer.toString(this.dinheiroInimigo));
    }
    
    private String getNaipe(int codigo){
        String resultado;
        switch(codigo){
            case 1:
                resultado = "ouro";
                break;
            case 2:
                resultado = "paus";
                break;
            case 3:
                resultado = "espa";
                break;
            case 4:
                resultado = "copa";
                break;
            default:
                resultado = "bugou pra caralho";
                break;
        }
        return resultado;
    }
    
    private void verificaVitoria(){
        if(dinheiroInimigo <= 0){
            // Estatísticas
            this.vitorias++;
            
            JOptionPane.showMessageDialog(this, "Você ganhou!\nFicou com todo o dinheiro do estranho.\n\nSeu saldo final: $" + dinheiro + "\nSaldo final do estranho: $" + dinheiroInimigo, "VOCÊ VENCEU", JOptionPane.INFORMATION_MESSAGE);
            if(this.manteveApostaOriginal && this.tConquistas.getValueAt(1, 2).equals("-")){
                JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\nCONFIO NO QUE TENHO!\n- Ganhe uma partida sem alterar o valor da aposta!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
                this.tConquistas.setValueAt(this.recebeHorario(), 1, 2);
            }
            if(!this.perdeuUmaAposta && this.tConquistas.getValueAt(2, 2).equals("-")){
                JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\nCASADO COM A SORTE!\n- Ganhe uma partida sem perder uma aposta!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
                this.tConquistas.setValueAt(this.recebeHorario(), 2, 2);
            }
            this.iniciarNovoJogo(true);
        } else if(dinheiro <= 0){
            // Estatísticas
            this.derrotas++;
            
            JOptionPane.showMessageDialog(this, "Você perdeu!\nO estranho ficou com todo o seu dinheiro.\n\nSeu saldo final: $" + dinheiro + "\nSaldo final do estranho: $" + dinheiroInimigo, "VOCÊ PERDEU", JOptionPane.WARNING_MESSAGE);
            this.iniciarNovoJogo(true);
        }
    }
    
    private void iniciarNovoJogo(boolean acabouJogoAnterior){
        // Reseta as variáveis
        cartaAtual[0] = 0;
        cartaAtual[1] = 0;
        cartaAnterior[0] = 0;
        cartaAnterior[1] = 0;
        dinheiro = 120;
        valorAposta = 20;
        dinheiroInimigo = gerarDinheiroEstranho();
        multiplicador = 2;
        
        // Reseta as conquistas
        this.manteveApostaOriginal = true;
        this.perdeuUmaAposta = false;
        this.vitoriasSeguidas = 0;
        this.vitoriasSeguidasMaior = 0;
        if(!acabouJogoAnterior){
            for(int i = 0; i < tConquistas.getRowCount(); i++){
                this.tConquistas.setValueAt("-", i, 2);
            }
        }
        
        if(!acabouJogoAnterior){
            // Reseta as estatísticas
            this.vitorias = 0;
            this.derrotas = 0;
            this.apostasGanhas = 0;
            this.apostasPerdidas = 0;
            this.apostasEmpatadas = 0;
            this.apostasMaior = 0;
            this.apostasMenor = 0;
            this.dinheiroGanho = 0;
            this.dinheiroPerdido = 0;
        }

        // Atualiza os componentes da janela
        this.jSlider1.setValue(valorAposta);
        this.lDinheiroAtual.setText(Integer.toString(dinheiro));
        this.lDinheiroInimigo.setText(Integer.toString(dinheiroInimigo));
        this.lMultiplicador.setText(Integer.toString(multiplicador));
        this.mEstranho.setText(E.geraFalaInicio());
        this.atualizaCamposEstatisticas();

        // Reseta o ícone da carta anterior
        lCartaAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/none.png")));

        // Reseta o nome salvo
        this.nomeSalvo = "";
        
        // Sorteia a carta inicial
        this.sorteiaUmaCarta(true);
    }
    
    private int geraNumeroAleatorio(int minimo, int maximo){
        return (int) minimo + (int) (Math.random() * maximo);
    }
    
    /*
        ----------------------
        MÉTODOS DO ESTRANHO
        ---------------------
    */
    
    private void verificaAlteracaoMultiplicador(){
        if(dinheiro > dinheiroInimigo && multiplicador >= 2){
            if((dinheiroInimigo > 120 && dinheiroInimigo < 250) && multiplicador == 2){
                multiplicador = 3;
                this.mEstranho.setText(E.geraFalaGenerica("Hora de mudar esse multiplicador!\nO triplo ou nada!"));
            } else if(dinheiroInimigo <= 120 && (multiplicador == 2 || multiplicador == 3)){
                multiplicador = 4;
                this.mEstranho.setText(E.geraFalaGenerica("Escute aqui, eu faço as regras aqui! Quádruplo ou você está fora! E NÃO ESTOU NERVOSO!"));
            }
            this.lMultiplicador.setText(Integer.toString(multiplicador));
        }
        if(dinheiroInimigo > dinheiro && multiplicador != 2){
            if((dinheiroInimigo >= 120 && dinheiroInimigo < 250) && multiplicador == 4){
                multiplicador = 3;
                this.mEstranho.setText(E.geraFalaGenerica("Haha, está tão mal assim? Vou lhe dar uma colher de chá!"));
            } else if(dinheiroInimigo >= 250 && (multiplicador == 3 || multiplicador == 4)){
                multiplicador = 2;
                this.mEstranho.setText(E.geraFalaGenerica("Como estou na vantagem, vou lhe dar a vantagem de mudar o multiplicador!"));
            }
            this.lMultiplicador.setText(Integer.toString(multiplicador));
        }
        
    }
    
    private int gerarDinheiroEstranho(){
        int valorFinal = this.geraNumeroAleatorio(1, 620);
        if(valorFinal < 200){
            do{
                valorFinal+= this.geraNumeroAleatorio(1, 20);
            }while(valorFinal < 200);
        }
        
        return valorFinal;
    }
    
    /*
        Métodos das conquistas
    */
    
    private void verificaVitoriasSeguidas(){
        if(vitoriasSeguidas == 5 && this.tConquistas.getValueAt(0, 2).equals("-")){
            JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\nALGUNS NASCEM COM SORTE!\n- Ganhe cinco apostas seguidas!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
            this.tConquistas.setValueAt(this.recebeHorario(), 0, 2);
        }
        
        if(vitoriasSeguidasMaior == 3 && this.tConquistas.getValueAt(5, 2).equals("-")){
            JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\nQUAIS AS CHANCES?!\n- Ganhe três apostas apenas apostando em maior!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
            this.tConquistas.setValueAt(this.recebeHorario(), 5, 2);
        }
    }
    
    private void verificaRealeza(){
        if(((cartaAnterior[0] == 12 && cartaAtual[0] == 13) || (cartaAnterior[0] == 13 && cartaAtual[0] == 12)) && this.tConquistas.getValueAt(6, 2).equals("-")){
            JOptionPane.showMessageDialog(this, "Você conseguiu a conquista:\nREALEZA!\n- Una o rei e a rainha numa aposta!", "CONQUISTA LIBERADA", JOptionPane.INFORMATION_MESSAGE);
            this.tConquistas.setValueAt(this.recebeHorario(), 6, 2);
        }
    }
    
    private String recebeHorario(){
        return new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date());
    }
    
    /*
        Métodos das estatísticas
    */
    
    private void atualizaCamposEstatisticas(){
        this.lEstApostasGanhas.setText(Integer.toString(this.apostasGanhas));
        this.lEstApostasMaior.setText(Integer.toString(this.apostasMaior));
        this.lEstApostasMenor.setText(Integer.toString(this.apostasMenor));
        this.lEstApostasEmpatadas.setText(Integer.toString(this.apostasEmpatadas));
        this.lEstApostasPerdidas.setText(Integer.toString(this.apostasPerdidas));
        this.lEstDerrotas.setText(Integer.toString(this.derrotas));
        this.lEstDinheiroGanho.setText(Integer.toString(this.dinheiroGanho));
        this.lEstDinheiroPerdido.setText(Integer.toString(this.dinheiroPerdido));
        this.lEstVitorias.setText(Integer.toString(this.vitorias));
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bApostarMais;
    private javax.swing.JButton bApostarMenos;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lCartaAnterior;
    private javax.swing.JLabel lCartaAtual;
    private javax.swing.JLabel lDinheiroAtual;
    private javax.swing.JLabel lDinheiroInimigo;
    private javax.swing.JLabel lEstApostasEmpatadas;
    private javax.swing.JLabel lEstApostasGanhas;
    private javax.swing.JLabel lEstApostasMaior;
    private javax.swing.JLabel lEstApostasMenor;
    private javax.swing.JLabel lEstApostasPerdidas;
    private javax.swing.JLabel lEstDerrotas;
    private javax.swing.JLabel lEstDinheiroGanho;
    private javax.swing.JLabel lEstDinheiroPerdido;
    private javax.swing.JLabel lEstVitorias;
    private javax.swing.JLabel lMultiplicador;
    private javax.swing.JMenuItem mAjudaSobre;
    private javax.swing.JTextArea mEstranho;
    private javax.swing.JMenuItem mJogoAbrir;
    private javax.swing.JMenuItem mJogoNovo;
    private javax.swing.JMenuItem mJogoSalvar;
    private javax.swing.JPanel pConquistas;
    private javax.swing.JPanel pEstatisticas;
    private javax.swing.JPanel pJogo;
    private javax.swing.JPanel painelCartas;
    private javax.swing.JPanel painelDinheiro;
    private javax.swing.JPanel painelEstranho;
    private javax.swing.JTable tConquistas;
    // End of variables declaration//GEN-END:variables
}
